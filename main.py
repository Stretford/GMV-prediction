__author__ = 'Stretford'
import population

data1 = [
(1722118200, 1767307289, 1892712653),
(1764308165, 2000964017, 1835445836),
(1765806297, 1764308165, 2000964017),
(1767307289, 1892712653, 1802685193),
(1802685193, 1901946444, 2050613431),
(1829650113, 1722118200, 1767307289),
(1835445836, 1829650113, 1722118200),
(1892712653, 1802685193, 1901946444),
(1901946444, 2050613431, 2204466041),
(2000964017, 1835445836, 1829650113),
(2002197578, 2096499063, 2193883923),
(2021759281, 2118199263, 2239315893),
(2050613431, 2204466041, 2021759281),
(2094486294, 2002197578, 2096499063),
(2096499063, 2193883923, 2168730618),
(2110262602, 2094486294, 2002197578),
(2118199263, 2239315893, 2110262602),
(2168730618, 2312108034, 2436013333),
(2193883923, 2168730618, 2312108034),
(2204466041, 2021759281, 2118199263),
(2239315893, 2110262602, 2094486294),
]

data2 = [
(2312108034, 2436013333, 2614748826),
(2350220120, 2639940936, 2501991712),
(2361239568, 2435711797, 2534613253),
(2435711797, 2534613253, 2470210879),
(2436013333, 2614748826, 2439311577),
(2439311577, 2350220120, 2639940936),
(2450738301, 2361239568, 2435711797),
(2470210879, 2619086745, 2796457185),
(2501991712, 2450738301, 2361239568),
(2534613253, 2470210879, 2619086745),
(2614748826, 2439311577, 2350220120),
(2619086745, 2796457185, 3042956772),
(2639940936, 2501991712, 2450738301),
(2796457185, 3042956772, 2680952158),
(3042956772, 2680952158, 2686271332),
]

test_data = [2796457185, 3042956772, 2680952158, 2686271332, 3021892954, 2791292596, 2712581694]

def load_data(data):
    X1 = []
    X2 = []
    Y = []
    for x1, x2, y in data1:
        X1.append(x1)
        X2.append(x2)
        Y.append(y)
    min1 = min(X1)
    max1 = max(X1)
    min2 = min(X2)
    max2 = max(X2)
    min_y = min(Y)
    max_y = max(Y)

    ranges = [min1, max1, min2, max2, min_y, max_y]
    return ranges

def populate(data):
    ranges = load_data(data)
    p = population.population(9, ranges)
    for i in range(0, 20):
        for c in p.colony:
            c.fitness_score = c.cal_fitness(data)
        p.next_generation()
        p.keep_size()

    return p.best_gene()

def predict(best_gene, x1, x2):
    #print(','.join(str(c.fitness_score) for c in best_gene.colony))
    result = best_gene.defuzzify(x1, x2)
    return result

#population1 = populate(data1)
best_gene2 = populate(data2)
predictions = []
for i in range(0, len(test_data) - 1):
    predictions.append(predict(best_gene2, test_data[i], test_data[i + 1]))

print predictions

